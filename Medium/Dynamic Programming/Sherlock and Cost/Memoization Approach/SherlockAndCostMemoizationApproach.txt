Question
    In this challenge, you will be given an array B and must determine an array A.
    There is a special rule: For all i, A[i] <= B[i]. That is, A[i] can be any number you choose such that 1 <= A[i] <= B[i].
    Your task is to select a series of A[i] given B[i]such that the sum of the absolute difference of consecutive pairs of A is maximized.
    This will be the array's cost, and will be represented by the variable S below.

Thoughts Before Coding
    - The recursive approach is inefficient due to overlapping recursive calls
        - We can avoid overlapping recursive calls using memoization
    - What do we need to cache?
        - In each of the recursive call
            - We are trying to find the 'maxSum' at each 'i, prev'
            - This means we can cache 'i,prev' with 'maxSum'

Answer
    - We will perform 2 recursive calls
        - The first recursive call we will pick '1' for the number at index '0' inside 'A'
        - The second recursive call we will pick 'B[i]' for the number at index '0' inside 'A'
        - We will return the recursive call with a higher result
    - Create a 2D matrix 'memo' to cache previously calculated results
        - fill 'memo' with -1
    - Implement the top down memoization approach
        - What parameters do we need?
            - i, the current index we are populating
            - prev, variable to indicate if we pick 1 or 'B[i - 1]' for the previous index
                - 0 = 1
                - 1 = B[i - 1]
            - B, the input array
            - memo, cache
        - What is the base case?
            - if 'i' is out of bound
                - return 0
            - If 'memo[i][prev]' is not equal to -1
                - return 'memo[i][prev]'
        - In each of the recursive call
            - Recursively find the 'sum1' if we pick 1
                - i => i + 1
                - prev => 0
                - Increment 'sum1' by 'abs(1 - (prev == 0 ? 1 : B[i - 1]))'
            - Recursively find the 'sum2' if we pick 'B[i]'
                - i => i + 1
                - prev => 1
                - Increment 'sum2' by 'abs(B[i] - (prev == 0 ? 1 : B[i - 1]))'
            - Put 'max(sum1, sum2)' at 'memo[i][prev]'
            - Return 'memo[i][prev]'
    - This solution is not efficient enough and will result in "TLE" error

What is the Time and Space Complexity?
    - Time Complexity = O(2 * n*2) = O(n), where n is the length of the input array
        - O(2 * n*2), 2 recursive calls, all combination of 'i' and 'prev'
    - Space Complexity = O(n) + O(n * 2) = O(n), where n is the length of the input array
        - O(n), recursive call stack memory
        - O(n * 2), memo