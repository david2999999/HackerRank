Question
    You are working at the cash counter at a fun-fair, and you have different types of coins available to you in infinite quantities. The value of each coin is already given.
    Can you determine the number of ways of making change for a particular number of units using the given types of coins?

    Function Description
        Complete the getWays function in the editor below. It must return an integer denoting the number of ways to make change.

        getWays has the following parameter(s):
            - n: an integer, the amount to make change for
            - c: an array of integers representing available denominations

Thoughts Before Coding
    - We will first implement the recursive approach
        - In each of the recursive call
            - We will need to keep track of the current coin we are on
            - We have up to 2 choices for each of the coins
                - We can either include the current coin OR
                - not include the current coin

Answer
    - Implement the recursive approach
        - What parameters do we need?
            - n, the current target amount
            - i, the current coin we are at
            - c, the input list of coins
        - What is the base case?
            - If 'n' is equal to 0
                - return 1
            - If 'i' is out of bound
                - return 0
            - If 'c[i]' is greater than 'n'
                - return the recursive result of moving to the next coin
                    - i => i + 1
        - In each of the recursive call
            - Recursively find the number of 'ways1' of including this coin
                - i => i
                - amount => amount - coin[i]
            - Recursively find the number of 'ways2' of not including this coin
                - i => i + 1
            - Return 'ways1 + ways2'
    - This solution is not efficient enough and will result in "TLE" error