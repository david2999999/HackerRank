Question
    You are working at the cash counter at a fun-fair, and you have different types of coins available to you in infinite quantities. The value of each coin is already given.
    Can you determine the number of ways of making change for a particular number of units using the given types of coins?

    Function Description
        Complete the getWays function in the editor below. It must return an integer denoting the number of ways to make change.

        getWays has the following parameter(s):
            - n: an integer, the amount to make change for
            - c: an array of integers representing available denominations

Thoughts Before Coding
    - In the bottom up 2D approach
        - We can see that we are only relying on values from the row below at 'i + 1'
        - This means we can create an array to represent our 'ways' matrix
            - In each of the iteration
                - We will be replacing values from the row below

Answer
    - Create an array 'ways'
    - Iterate through the indices of 'c', denoted as 'i'
        - Iterate through the amount from 0 -> n, denoted as 'curN'
            - If 'curN' is equal to 0
                - Place 1 at 'ways[curN]'
                - continue to next iteration
            - If 'c.get(i)' is greater than 'curN'
                - continue to next iteration
            - Increment 'ways[curN]' by 'ways[curN - c.get(i)]
    - Return 'ways[n]'

What is the Time and Space Complexity?
    - Time Complexity = O(m * n), where m is the number of different coins, and n is the amount
        - O(m * n), all combination of 'i' and 'curN'
    - Space Complexity = O(n), where n is the amount
        - O(m * n), ways array